package main

import "fmt"

/*
无参有返回值
注意：有返回值的函数，必须有明确的终止语句，否则会引发编译错误，有返回值的函数必须要有return，无返回值类似于void函数

*/

//只有一个返回值
func myfunc() int {
	return 6666
}

//给返回值起一个变量名，go语言推荐写法，只要再给返回值赋值，即能与上面的函数等价
//这种为常用写法
func myfunc01() (result int) { //中间都是没有逗号的,多个变量需要逗号
	result = 666
	return //可以不用指明
}
func main() {
	var a int
	b := myfunc() //使用自动推导类型，但是这种语法只能在函数体中使用，定义全局变量时遵照 var a int这种写法
	a = myfunc()
	fmt.Println(a, b)
}

//go与c++和Java不同的是，go允许有多个返回值
func Myfunc02() (a int, b int, c int) {
	//a,b,c=111,222,333
	a, b, c = 111, 222, 333 //多个变量赋值，不可写成a=111,b=222,c=333,要么按照这种写法写，要么分成三行写
	return

}

/*
函数的注意点：
1.函数名称，根据约定，函数名首字母小写即为private，大写即为public
2，参数列表：函数可以有0个或多个参数，参数格式为：变量名 类型，如果有多个参数通过逗号分隔，不支持默认参数
3.返回类型：可以只有类型没有变量名（不推荐），有返回值，则必须在函数的内部添加return语句
	若只有一个返回值，则可以省略返回值列表中的括号
4，如果函数有多个返回值，有几个不想要，则可以使用_（匿名变量作为占位符），通过匿名变量丢弃某个返回值
*/

/*
函数类型
函数也是一种数据类型，通过type给一个函数类型起名，但必须这类函数有相同的参数和返回值
相当于函数指针,可用来实现多态，完成回调函数的工作
回调函数：函数有一个参数是函数类型，这个函数就是回调函数
多态：多种形态，调用同一个接口，可以实现不同的表现
如果不使用函数类型，则声明接口时则必须先定义，在能用，比如下面例子如果直接调用Add,不仅缺乏扩展性，而且必须先要实现Add函数，才可以使用
*/

type FuncType func(int, int) int //没有函数名字，没有大括号
//声明一个函数类型的变量
//var ftest FuncType
//ftest=Myfunc02

//实现多态，实现一个加减乘除的计算器
func Calc(a int, b int, ftest FuncType) (result int) {
	result = ftest(a, b) //ftest 甚至都没有实现，也可以这样用
	return
}

//实现加法功能
func Add(a, b int) int {
	return a + b
}

//实现减法功能
func minus(a, b int) int {
	return a - b

}

/*
在调用的时候可以写成
a:=Calc(1,1,Add) 也可以写成minus
fmt.Println(a)
*/

/*
匿名函数和闭包：
所谓闭包就是一个函数“捕获”了和它在同一作用域的其他变量和常量，这就意味着当闭包被调用的时候，不管在程序什么地方调用，闭包能够使用
这些常量或者变量，它不关心这些捕获了的变量和常量是否已经超出了作用域，所以只要闭包还在使用它，这些变量就还会存在

在go语言中，所有的匿名函数（go语言规范中称之为函数字面量）都是闭包。匿名函数是指不需要定义函数名的一种函数实现方式

*/

//闭包以引用的方式捕获变量，会更改本身的值
func testlamda() {
	//定义匿名函数同时调用
	//不带参数的匿名函数
	func() {
		fmt.Println("这是匿名函数")

	}() //后面的（）代表调用此匿名函数

	//带参数的匿名函数
	func(i, j int) {
		fmt.Println(i, j)

	}(3, 5)

	//有参有返回值的匿名函数
	x, y := func(i, j int) (add int, minus int) {
		add, minus = i+j, i-j
		return

	}(19, 30)

}

/*
闭包的特点----重要，难点   https://blog.csdn.net/tennysonsky/article/details/78147905
*/
